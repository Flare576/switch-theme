#!/bin/bash
version=2.3.0
usage="$(basename "$0") [hvs]
Calling this script will return it's absolute path. The intent is to put an entry like this in your profile:

source \"\$(switch-theme)\"

which will then allow you to call 'st <theme_alias>' to switch themes.

Run 'switch-theme -s' to setup your terminal emulator after first install."

SCRIPTPATH=$(realpath "$0")
INSTALLED="${SCRIPTPATH%/*}"
THEMES="$INSTALLED/lib/themes"

# Most of the work is done when a user wants to change themes
function st() {
  hasRun="false"
  # Each theme can have a number of "aliases", e.g. "dark", "night", "soldark"
  # Find matching alias (and warn if there's more than one)
  find "$THEMES" -type f -name "config.yml" | while read -r config; do
    [ -e "$config" ] || continue
    checkFor=( ",$(st_yaml "$config" "alias")," )
    # padding with commas is a nice trick to guard against partial matches
    [[ " ${checkFor[@]} " =~ ",$1," ]] || continue
    if [ $hasRun = "true" ] ; then
      echo "There as a duplicate alias; using first found"
      return 1
    fi
    hasRun="true"
    theme_folder="$(dirname "$config")"
    [ -z "$THEME_CONFIG" ] && THEME_CONFIG="$HOME/.config/theme"
    cat << EOF > $THEME_CONFIG
export ST_VIM_THEME="$theme_folder/$(st_yaml "$config" "vim")"
export ST_TMUX_THEME="$theme_folder/$(st_yaml "$config" "tmux")"
source "$theme_folder/$(st_yaml "$config" "zsh")"
# bat doesn't use full paths; it ships with its themes
export BAT_THEME="$(st_yaml "$config" "bat")"
EOF
    source "$THEME_CONFIG"

    # refresh current zsh and tmux
    command -v tmux &> /dev/null && tmux source-file "$ST_TMUX_THEME" &> /dev/null
    # vim and zsh are configured to watch for changes on updates

    # cheat makes it pretty easy, so why not
    # because it edits a source-controlled file each time;TODO: see if we can avoid that
    if command -v cheat &> /dev/null ; then
      cheat_theme="$(st_yaml "$config" "cheat")"
      filename="$HOME/cheat/conf.yml"
      sed -i.bkp -Ee "s/^style:.*/style: $cheat_theme/" "$filename" &> /dev/null && rm "${filename}.bkp"
    fi

    # VSCode makes it pretty easy, so why not
    if command -v Code &> /dev/null ; then
      code_theme="$(st_yaml "$config" "vscode")"
      filename="$HOME/Library/Application Support/Code/User/settings.json"

      # Read existing content or provide an empty JSON object if the file doesn't exist.
      # Then update the 'workbench.colorTheme' using jq and write back atomically.
      # The '2>/dev/null' suppresses potential error messages from 'cat' if the file is not found initially.
      ( [ -f "$filename" ] && cat "$filename" 2>/dev/null || echo "{}" ) | \
        jq --arg theme "$code_theme" '{"workbench.colorTheme": "$theme"}' > "$filename.tmp" && \
        mv "$filename.tmp" "$filename"
    fi

    # OSS Code on Steam Deck makes it pretty easy (lower-case c), so why not
    if command -v code &> /dev/null ; then
      code_theme="$(st_yaml "$config" "vscode")"
      filename="$HOME/.config/Code - OSS/User/settings.json"
      mkdir -p "$(dirname "$filename")"

      # Read existing content or provide an empty JSON object if the file doesn't exist.
      # Then update the 'workbench.colorTheme' using jq and write back atomically.
      # The '2>/dev/null' suppresses potential error messages from 'cat' if the file is not found initially.
      ( [ -f "$filename" ] && cat "$filename" 2>/dev/null || echo "{}" ) | \
        jq --arg theme "$code_theme" '{"workbench.colorTheme": "$theme"}' > "$filename.tmp" && \
        mv "$filename.tmp" "$filename"
    fi

    # Kate on Steam Deck makes it pretty easy so why not
    if [ -f "$HOME/.config/katerc" ]; then
      kate_theme="$(st_yaml "$config" "katefile")"
      kateui_theme="$(st_yaml "$config" "kateui")"
      filename="$HOME/.config/katerc"
      sed -i.bkp -Ee "s/^Color Theme=.*/Color Theme=$kate_theme/" "$filename" &> /dev/null && rm "${filename}.bkp"
      sed -i.bkp -Ee "s/^ColorScheme=.*/ColorScheme=$kateui_theme/" "$filename" &> /dev/null && rm "${filename}.bkp"
    fi


    # Terminal emulators for different machines I use
    if command -v mintheme &> /dev/null ; then # WSL
      # https://github.com/mintty/utils/pull/2/files
      # patch submitted to mintheme; remove check when accepted (or declined)
      minttyTheme="$(st_yaml "$config" "mintty")"
      theme=$(mintheme --save $name/$minttyTheme | sed \
        -e '2!d' \
        -e 's/saved.\+''//')
      if [[ theme != *"tmux"* ]] ; then # declined
        echo $theme | sed -e 's/^/Ptmux;/'
      else # accepted
        echo $theme
      fi
    elif command -v defaults &> /dev/null ; then # OSX
      # Setting open Terminal windows information here
      # https://superuser.com/questions/187591/os-x-terminal-command-to-change-color-themes
      title="$(st_yaml "$config" "terminal")"
      # TODO: should be a way to check if this value is already there...
      defaults write com.apple.Terminal "Startup Window Settings" "$title"    # Set new profile to startup
      defaults write com.apple.Terminal "Default Window Settings" "$title"    # Set new profile to default
      osascript "$INSTALLED/lib/themeOpenTerminals.scpt" "$title" # Update active/existing windows
    elif [ -n "$CONTAINER_ID" ]; then
      # Inside of a distrobox container, probably a steam deck using Konsole outside of the container
      title="$(st_yaml "$config" "konsole")"

      # Update default
      conFile="$HOME/.config/konsolerc"
      sed -i.bkp -Ee "s%DefaultProfile=.*%DefaultProfile=${title}.profile%" "$conFile" && rm "${conFile}.bkp"

      dbeq="distrobox-host-exec qdbus"
      # https://discuss.kde.org/t/changing-konsole-profile-from-command-line/18018/6
      for instance in $(eval "$dbeq" | grep "org.kde.konsole"); do
        baseCmd="$dbeq $instance"
        for session in $(eval "$baseCmd" | grep "Sessions/"); do
          curProfile=$(eval "$baseCmd $session org.kde.konsole.Session.profile")
          # For now, don't touch non-Solarized sessions
          if echo "$curProfile" | grep -q "Solarized"; then
            eval "$baseCmd $session org.kde.konsole.Session.setProfile \"$title\""
          fi
        done
      done
    elif command -v dconf &> /dev/null ; then  # Chromebook
      # copy/paste desired theme over "current" theme (which should be "Flare")
      symId=":6d940353-9091-4d32-b491-95a661527d08/"
      basePath="/org/gnome/terminal/legacy/profiles:"
      gnomeId="$(st_yaml "$config" "gnome")"
      updateTo=$(dconf dump "$basePath/$gnomeId" | sed -e "s/visible-name='.*'/visible-name='Flare'/")
      echo "$updateTo" | dconf load $basePath/$symId
    fi # else we're probably not running a terminal emulator on this machine
  done
}

# convenience method
function st_yaml() {
  line=$(grep $2 $1)
  echo ${line#$2: }
}

# ZSH/OMZ functionality to watch for changes to theme settings
function st_zsh_theme_refresh() {
  [ -z "$THEME_CONFIG" ] && THEME_CONFIG="$HOME/.config/theme"
  [ -f "$THEME_CONFIG" ] && source "$THEME_CONFIG"
  [ -f "$ST_ZSH_THEME" ] && source "$ST_ZSH_THEME"
}
precmd_functions=(${precmd_functions[@]} st_zsh_theme_refresh)

# see https://stackoverflow.com/a/28776166
(return 0 2>/dev/null) && sourced=1 || sourced=0

if [ $sourced -eq 1 ]; then
  [ -z "$THEME_CONFIG" ] && THEME_CONFIG="$HOME/.config/theme"
  [ -e "$THEME_CONFIG" ] || st dark
  source "$THEME_CONFIG"
else
  # Executing as a command
  while getopts ':hsv' option; do
    case "$option" in
      h) echo "$usage"
        exit
        ;;
      s) do_setup="true"
        ;;
      v) echo $version
        exit
        ;;
      *) echo "Unknown Option '$OPTARG', exiting"
        exit
        ;;
    esac
  done
  shift $((OPTIND -1))

  if [ "$do_setup" == "true" ]; then
    # Each terminal emulator setup file should check for itself
    $INSTALLED/lib/setupGnomeTheme.sh "$THEMES"
    $INSTALLED/lib/setupWSLTheme.sh "$THEMES"
    $INSTALLED/lib/setupTerminalAppTheme.sh "$THEMES"
    $INSTALLED/lib/setupKonsoleTheme.sh "$THEMES"

    # Wire up vim plugin for <leader>t
    rm "$HOME/.vim/pack/plugins/start/vim-switch-themes" &> /dev/null
    ln -sf "$INSTALLED/lib/vim-switch-themes" "$HOME/.vim/pack/plugins/start/vim-switch-themes"
  else
    printf "$SCRIPTPATH"
  fi
fi

# vim: ft=bash
